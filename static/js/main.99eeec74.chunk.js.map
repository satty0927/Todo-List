{"version":3,"sources":["ListItem.js","DropDownInput.js","AddTaskInput.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","state","listDiv","this","passedTask","map","item","className","key","rel","href","id","value","onChange","e","setUpdate","target","onClick","deleteTasks","React","Component","keys","require","axios","baseAddress","mainEndpoint","DropDownInput","dropDownDisplay","inputDisplay","dropDownSelectedOption","selectedOption","dropdownOptions","textboxValue","currentItems","tableName","tableID","getData","bind","addNewTable","updateState","uploadTextToApi","handleDropdownChange","url","headers","getHeaders","get","then","res","fetchedData","data","len","length","i","setState","tempData","preventDefault","postHeaders","name","demoData","JSON","stringify","post","ID","Date","now","tempDataToPut","selectDropdownOption","putHeaders","put","console","log","selectedTable","parse","optionElements","style","display","onSubmit","type","placeholder","InputTask","currentTask","handleChange","addTask","tempTaskList","tasks","updateTableState","Input","selectedTableData","currentTableTasks","task","getCurrentSelectedOption","updateCurrentTableTasks","fetchedResponse","fetchedTasks","tasksLength","stateUpdator","updatedTasks","deleteHeaders","delete","mainTable","filterTable","filter","fil","refs","DropdownComponent","ref","activeTable","ToDoItems","taskList","updateStateTaskList","deleteTask","valueToUpdate","filteredList","val","child","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99eeec74.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/ListItem.css';\r\n\r\nclass ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    //Delete Item\r\n\r\n\r\n\r\n    render() {\r\n        const items = this.props.passedTask;\r\n        const listDiv = items.map(item => {\r\n            return <div className=\"listItem\" key={item.key}>\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://cdn.materialdesignicons.com/4.9.95/css/materialdesignicons.min.css\"\r\n                />\r\n                <p>\r\n                    <input id={item.key} value={item.value} onChange={(e) => {\r\n                        this.props.setUpdate(e.target.value, item.key)\r\n                    }}></input><span className=\"mdi mdi-delete delIcon\" onClick={() => this.props.deleteTasks(item.key)}></span></p>\r\n            </div>\r\n        })\r\n        return (<div>\r\n            {listDiv}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport './css/DropDown.css';\r\nconst keys = require('./Keys.json');\r\nconst axios = require('axios');\r\nconst baseAddress = keys.baseAddress;\r\nconst mainEndpoint = keys.mainEndpoint;\r\n\r\nclass DropDownInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropDownDisplay: \"block\",\r\n            inputDisplay: \"none\",\r\n            dropDownSelectedOption: this.props.selectedOption,\r\n            dropdownOptions: [],\r\n            textboxValue: \"\",\r\n            currentItems: {\r\n                tableName: \"\",\r\n                tableID: \"\",\r\n                key: \"\"\r\n            }\r\n        }\r\n        this.getData = this.getData.bind(this);\r\n        this.addNewTable = this.addNewTable.bind(this);\r\n        this.updateState = this.updateState.bind(this);\r\n        this.uploadTextToApi = this.uploadTextToApi.bind(this);\r\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.getData();\r\n    }\r\n    //Method to GET data from axios to a state = dropdownOptions.\r\n    getData() {\r\n        var url = baseAddress + \"/\" + mainEndpoint;\r\n        var headers = keys.getHeaders;\r\n        axios.get(url, { headers })\r\n            .then((res) => {\r\n                const fetchedData = res.data;\r\n                const len = fetchedData.length;\r\n                for (var i = 0; i < len; i++) {\r\n                    this.setState({\r\n                        currentItems: {\r\n                            tableName: fetchedData[i].tableName,\r\n                            tableID: fetchedData[i].tableID,\r\n                            key: fetchedData[i].key\r\n                        },\r\n                    })\r\n                    var tempData = this.state.dropdownOptions;\r\n                    tempData = [...tempData, this.state.currentItems];\r\n                    this.setState({\r\n                        dropdownOptions: tempData,\r\n                    })\r\n                }\r\n            });\r\n    }\r\n    //Handle switching and stuff.\r\n    addNewTable() {\r\n        this.setState({\r\n            dropDownDisplay: \"none\",\r\n            inputDisplay: \"block\"\r\n        })\r\n    }\r\n    //Update value from textbox to a state.\r\n    updateState(e) {\r\n        this.setState({\r\n            textboxValue: e.target.value\r\n        })\r\n    }\r\n    //Update set text to api and state.\r\n    uploadTextToApi(e) {\r\n        e.preventDefault();\r\n        //As soon as the button is clicked create a new table.\r\n        var url = keys.baseAddress;\r\n        var headers = keys.postHeaders;\r\n        headers.name = \"Task_\" + this.state.textboxValue;\r\n        const demoData = JSON.stringify([{ key: \"DemoKey\", value: \"DemoValue\" }]);\r\n        axios.post(url, demoData, { headers })\r\n            .then((res) => {\r\n                const ID = res.data.id;\r\n                this.setState({\r\n                    currentItems: {\r\n                        tableName: this.state.textboxValue,\r\n                        tableID: ID,\r\n                        key: Date.now()\r\n                    }\r\n                })\r\n                var tempDataToPut = JSON.stringify([...this.state.dropdownOptions, this.state.currentItems]);\r\n                var selectDropdownOption = this.state.currentItems.tableName;\r\n                url = keys.baseAddress + \"/\" + keys.mainEndpoint;\r\n                headers = keys.putHeaders;\r\n                axios.put(url, tempDataToPut, { headers })\r\n                    .then((res) => {\r\n                        console.log(\"Primary table updated.\");\r\n                        var selectedTable = this.state.currentItems.tableName;\r\n                        this.props.selectedOption(selectedTable);\r\n                    })\r\n                this.setState({\r\n                    dropdownOptions: JSON.parse(tempDataToPut),\r\n                    dropDownSelectedOption: selectDropdownOption\r\n                })\r\n            });\r\n        //Return to the dropdown.\r\n        this.setState({\r\n            dropDownDisplay: \"block\",\r\n            inputDisplay: \"none\"\r\n        })\r\n    }\r\n    //Handles change in dropdown.\r\n    handleDropdownChange(e) {\r\n        this.setState({\r\n            dropDownSelectedOption: e.target.value\r\n        })\r\n        this.props.selectedOption(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        var data = this.state.dropdownOptions;\r\n        var optionElements = data.map((item) => {\r\n            return <option key={item.key}>{item.tableName}</option>\r\n        })\r\n        return (<div id=\"major\">\r\n            <div id=\"dropdownDiv\" style={{ display: this.state.dropDownDisplay }}>\r\n                <select name=\"dropdown\" id=\"dropdown\" value={this.state.dropDownSelectedOption} onChange={this.handleDropdownChange}>\r\n                    {optionElements}\r\n                </select>\r\n                <button onClick={this.addNewTable}>ADD NEW</button>\r\n            </div>\r\n            <div id=\"inputDiv\" style={{ display: this.state.inputDisplay }}>\r\n                <form onSubmit={this.uploadTextToApi}>\r\n                    <input type=\"text\" id=\"inputBox\" placeholder=\"Add new task??\" onChange={this.updateState}></input>\r\n                    <button>ADD</button>\r\n                </form>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default DropDownInput;","import React from 'react';\r\nimport './css/AddTaskInput.css';\r\n\r\nclass InputTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            textboxValue: \"\",\r\n            currentTask: {\r\n                key: \"\",\r\n                value: \"\"\r\n            }\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addTask = this.addTask.bind(this);\r\n    }\r\n\r\n    //Update state with updated text value.\r\n    handleChange(e) {\r\n        this.setState({\r\n            textboxValue: e.target.value\r\n        })\r\n        this.setState({\r\n            currentTask: {\r\n                key: Date.now(),\r\n                value: e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    addTask(e) {\r\n        e.preventDefault();\r\n        //When submitted get the text value and update to a key-value pair and invoke a update state method.\r\n        var tempTaskList = [...this.props.tasks, this.state.currentTask];\r\n        this.props.updateTableState(JSON.stringify(tempTaskList));\r\n        this.setState({\r\n            textboxValue: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"InputTaskParent\">\r\n                <header>\r\n                    <form id=\"to-do-form\" onSubmit={this.addTask}>\r\n                        <hr></hr>\r\n                        <input type=\"text\" placeholder=\"Tasks to do..\" value={this.state.textboxValue} onChange={this.handleChange}></input>\r\n                        <button>TODO</button>\r\n                    </form>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputTask;","import React from 'react';\r\nimport Dropdown from './DropDownInput';\r\nimport TaskInput from './AddTaskInput';\r\nimport axios from 'axios';\r\nconst keys = require('./Keys.json');\r\n\r\nclass Input extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropDownSelectedOption: \"\",\r\n            selectedTableData: {\r\n                tableName: \"\",\r\n                tableID: \"\",\r\n                key: \"\"\r\n            },\r\n            currentTableTasks: [],\r\n            task: {\r\n                key: \"\",\r\n                value: \"\"\r\n            }\r\n        }\r\n        this.getCurrentSelectedOption = this.getCurrentSelectedOption.bind(this);\r\n        this.updateCurrentTableTasks = this.updateCurrentTableTasks.bind(this);\r\n    }\r\n    //Get current selected option.\r\n    getCurrentSelectedOption(value) {\r\n        var url = keys.baseAddress + \"/\" + keys.mainEndpoint;\r\n        var headers = keys.getHeaders;\r\n        axios.get(url, { headers })\r\n            .then((res) => {\r\n                var fetchedResponse = res.data;\r\n                var len = fetchedResponse.length;\r\n                for (var i = 0; i < len; i++) {\r\n                    if (fetchedResponse[i].tableName === value) {\r\n                        this.setState({\r\n                            selectedTableData: {\r\n                                tableName: fetchedResponse[i].tableName,\r\n                                tableID: fetchedResponse[i].tableID,\r\n                                key: fetchedResponse[i].key\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                //After getting the current selected option get the data from that table\r\n                url = keys.baseAddress + \"/\" + this.state.selectedTableData.tableID;\r\n                axios.get(url, { headers })\r\n                    .then((res) => {\r\n                        var fetchedTasks = res.data;\r\n                        var tasksLength = fetchedTasks.length;\r\n                        for (var i = 0; i < tasksLength; i++) {\r\n                            this.setState({\r\n                                task: {\r\n                                    key: fetchedTasks[i].key,\r\n                                    value: fetchedTasks[i].value\r\n                                }\r\n                            })\r\n                            this.setState({\r\n                                currentTableTasks: fetchedTasks\r\n                            })\r\n                            this.props.stateUpdator(this.state.currentTableTasks);\r\n                        }\r\n                    })\r\n            })\r\n    }\r\n\r\n    updateCurrentTableTasks(value) {\r\n        var updatedTasks = JSON.parse(value)\r\n        if (updatedTasks.length === 0) {\r\n            var url = keys.baseAddress + \"/\" + this.state.selectedTableData.tableID;\r\n            var headers = keys.deleteHeaders;\r\n            axios.delete(url, { headers });\r\n            //Update main table\r\n            url = keys.baseAddress + \"/\" + keys.mainEndpoint;\r\n            headers = keys.getHeaders;\r\n            axios.get(url, { headers }).then((res) => {\r\n                var mainTable = res.data;\r\n                var tableID = this.state.selectedTableData.tableID;\r\n                var filterTable = mainTable.filter((fil) => fil.tableID !== tableID);\r\n                headers = keys.putHeaders;\r\n                axios.put(url, filterTable, { headers });\r\n            })\r\n\r\n        }\r\n        else {\r\n            //Push the update to the specified table.\r\n            url = keys.baseAddress + \"/\" + this.state.selectedTableData.tableID;\r\n            headers = keys.putHeaders;\r\n            axios.put(url, updatedTasks, { headers })\r\n                .then((res) => {\r\n                    headers = keys.getHeaders;\r\n                    axios.get(url, { headers })\r\n                        .then((res) => {\r\n                            var fetchedData = res.data;\r\n                            this.setState({\r\n                                currentTableTasks: fetchedData\r\n                            })\r\n                            this.props.stateUpdator(this.state.currentTableTasks);\r\n                            this.refs.DropdownComponent.getData();\r\n                        })\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"inputParent\">\r\n                <Dropdown selectedOption={this.getCurrentSelectedOption} ref=\"DropdownComponent\" />\r\n                <TaskInput activeTable={this.state.selectedTableData} tasks={this.state.currentTableTasks} updateTableState={this.updateCurrentTableTasks} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\nimport './css/InputStyles.css';\nimport ListItem from './ListItem';\nimport Input from './Input';\nconst axios = require('axios');\n\nclass ToDoItems extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskList: []\n    }\n    this.updateStateTaskList = this.updateStateTaskList.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n  }\n  //This method will update state TaskList.\n  updateStateTaskList(value) {\n    var valueToUpdate = JSON.parse(JSON.stringify(value));\n    this.setState({\n      taskList: valueToUpdate\n    })\n  }\n\n  //This method would delete task.\n  deleteTask(key) {\n    console.log(\"TasksList Delete Task\");\n    var intialList = this.state.taskList;\n    var filteredList = intialList.filter(val => val.key !== key);\n    this.refs.child.updateCurrentTableTasks(JSON.stringify(filteredList));\n    this.setState({\n      taskList: filteredList\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"InputParent\">\n          <Input stateUpdator={this.updateStateTaskList} ref=\"child\" />\n        </div>\n        <div className=\"App\">\n          <ListItem id=\"listItem\" passedTask={this.state.taskList} deleteTasks={this.deleteTask} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ToDoItems;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}